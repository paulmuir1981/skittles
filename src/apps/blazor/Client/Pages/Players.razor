@page "/players"
@attribute [StreamRendering(true)]

@inject IApiClient ApiClient

<PageTitle>Players</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Players</MudText>
<MudText Class="mb-2">Manage your Players.</MudText>

<MudButton Class="mb-2" 
           Variant="Variant.Filled" 
           StartIcon="@Icons.Material.Filled.Add" 
           Color="Color.Success"
           OnClick="@(() => dataGrid.SetEditingItemAsync(new(Guid.Empty, "")))">Add Player</MudButton>


<MudDataGrid T="Player"
                Items="@players" 
                ReadOnly=false
                CommittedItemChanges="@CommittedItemChanges" 
                EditMode="@DataGridEditMode.Form"
                EditTrigger="@DataGridEditTrigger.Manual"
                Loading="@(players == null)"
                @ref="dataGrid">
    <Columns>
        <PropertyColumn Property="x => x.Name" />
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudStack Row>
                    <MudButton Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.Edit"
                               Color="Color.Warning"
                               OnClick="@context.Actions.StartEditingItemAsync">Edit</MudButton>
                    <MudButton Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               OnClick="@(() => DeletePlayer(@context.Item.Id))">Delete</MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    private IReadOnlyCollection<Player>? players;
    private MudDataGrid<Player> dataGrid = null!;

    protected override Task OnInitializedAsync()
    {
        return ListPlayers();
    }

    private async Task ListPlayers()
    {
        players = await ApiClient.ListPlayers();
    }

    private async Task CommittedItemChanges(Player player)
    {
        if (player.Id == Guid.Empty)
        {
            await ApiClient.CreatePlayer(new(player.Name));
        }
        else
        {
            await ApiClient.UpdatePlayer(player.Id, new(player.Name));
        }
        await ListPlayers();
    }

    private async Task DeletePlayer(Guid id)
    {
        await ApiClient.DeletePlayer(id);
        await ListPlayers();
    }
}
